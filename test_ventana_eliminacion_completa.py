#!/usr/bin/env python3
"""
Script de prueba completo para la ventana de eliminaci√≥n de empleados.
Verifica tanto el bot√≥n de eliminaci√≥n forzada como la funcionalidad de transferir tarjetas.
"""

import tkinter as tk
from tkinter import ttk
import sys
import os

# Agregar el directorio del proyecto al path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_ventana_eliminacion_completa():
    """Prueba completa de la ventana de eliminaci√≥n."""
    print("üß™ Iniciando prueba completa de la ventana de eliminaci√≥n...")
    
    # Crear ventana principal
    root = tk.Tk()
    root.title("Prueba Completa - Ventana de Eliminaci√≥n")
    root.geometry("900x700")
    
    # Datos de prueba
    empleado_prueba = {
        'identificacion': '1045112243',
        'nombre_completo': 'Jorge Alejandro San Jose',
        'telefono': '3112027405',
        'direccion': 'Calle 17 # 24-138'
    }
    
    def callback_actualizar():
        print("‚úÖ Callback de actualizaci√≥n ejecutado")
    
    def mock_api_client():
        """Mock del API client para pruebas"""
        class MockAPIClient:
            def delete_empleado(self, identificacion):
                # Simular que tiene tarjetas asociadas
                raise Exception("Empleado tiene tarjetas asociadas")
            
            def list_empleados(self):
                return [
                    {'identificacion': '1234567890', 'nombre_completo': 'Empleado Destino 1'},
                    {'identificacion': '0987654321', 'nombre_completo': 'Empleado Destino 2'},
                    {'identificacion': '5555555555', 'nombre_completo': 'Empleado Destino 3'},
                ]
            
            def transferir_tarjetas_empleado(self, origen, destino):
                print(f"‚úÖ Transferencia simulada: {origen} -> {destino}")
                return {"ok": True}
            
            def eliminar_empleado_forzado(self, identificacion):
                print(f"‚úÖ Eliminaci√≥n forzada simulada: {identificacion}")
                return {"ok": True}
        
        return MockAPIClient()
    
    try:
        # Importar la clase de la ventana
        from frames.frame_empleado import VentanaEliminarEmpleado
        
        # Crear bot√≥n para abrir la ventana
        def abrir_ventana():
            VentanaEliminarEmpleado(
                parent=root,
                callback_actualizar=callback_actualizar,
                api_client=mock_api_client(),
                empleado_data=empleado_prueba
            )
        
        # Bot√≥n para abrir la ventana de prueba
        btn_abrir = tk.Button(
            root, 
            text="üß™ Abrir Ventana de Eliminaci√≥n (Prueba Completa)",
            font=('Arial', 14, 'bold'),
            bg='blue', fg='white',
            command=abrir_ventana
        )
        btn_abrir.pack(pady=20)
        
        # Informaci√≥n de prueba
        info_frame = ttk.LabelFrame(root, text="Informaci√≥n de Prueba", padding="15")
        info_frame.pack(fill='x', padx=20, pady=10)
        
        ttk.Label(info_frame, text=f"üë§ Empleado: {empleado_prueba['nombre_completo']}", 
                 font=('Arial', 11, 'bold')).pack(anchor='w')
        ttk.Label(info_frame, text=f"üÜî ID: {empleado_prueba['identificacion']}", 
                 font=('Arial', 10)).pack(anchor='w')
        ttk.Label(info_frame, text="üìã Estado: Simula tener tarjetas asociadas", 
                 font=('Arial', 10)).pack(anchor='w')
        
        # Instrucciones detalladas
        instrucciones_frame = ttk.LabelFrame(root, text="Instrucciones de Prueba", padding="15")
        instrucciones_frame.pack(fill='x', padx=20, pady=10)
        
        instrucciones = [
            "1. Haz clic en 'Abrir Ventana de Eliminaci√≥n'",
            "2. Verifica que la ventana sea de 650x600 p√≠xeles",
            "3. Busca el separador visual entre las opciones",
            "4. Verifica el frame 'Eliminaci√≥n Forzada'",
            "5. Busca el checkbox con icono ‚òëÔ∏è",
            "6. Verifica el bot√≥n rojo grande con texto descriptivo",
            "7. Busca el mensaje 'NO se puede deshacer'",
            "8. Verifica que el combobox de empleados destino tenga opciones",
            "9. Prueba las funcionalidades (simuladas)"
        ]
        
        for i, instruccion in enumerate(instrucciones, 1):
            color = 'blue' if i <= 7 else 'green'
            ttk.Label(instrucciones_frame, text=instruccion, 
                     font=('Arial', 10), foreground=color).pack(anchor='w', pady=2)
        
        # Checklist de verificaci√≥n
        checklist_frame = ttk.LabelFrame(root, text="Checklist de Verificaci√≥n", padding="15")
        checklist_frame.pack(fill='x', padx=20, pady=10)
        
        checklist_items = [
            "‚úÖ Tama√±o de ventana: 650x600",
            "‚úÖ Separador visual entre opciones",
            "‚úÖ Frame 'Eliminaci√≥n Forzada' visible",
            "‚úÖ Checkbox con icono ‚òëÔ∏è",
            "‚úÖ Bot√≥n rojo grande visible",
            "‚úÖ Mensaje de advertencia",
            "‚úÖ Combobox con empleados destino",
            "‚úÖ Funcionalidad de transferencia",
            "‚úÖ Funcionalidad de eliminaci√≥n forzada"
        ]
        
        for item in checklist_items:
            ttk.Label(checklist_frame, text=item, font=('Arial', 10)).pack(anchor='w', pady=1)
        
        # Bot√≥n de salir
        btn_salir = tk.Button(
            root, 
            text="‚ùå Salir",
            font=('Arial', 12),
            command=root.quit
        )
        btn_salir.pack(pady=15)
        
        print("‚úÖ Ventana de prueba completa creada exitosamente")
        print("üìã Instrucciones:")
        print("   - Haz clic en 'Abrir Ventana de Eliminaci√≥n'")
        print("   - Verifica las mejoras visuales implementadas")
        print("   - Prueba la funcionalidad de transferir tarjetas")
        print("   - Prueba la funcionalidad de eliminaci√≥n forzada")
        
        # Ejecutar la aplicaci√≥n
        root.mainloop()
        
    except ImportError as e:
        print(f"‚ùå Error al importar la ventana: {e}")
        print("üí° Aseg√∫rate de que el archivo frame_empleado.py est√© en la carpeta frames/")
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")

def verificar_mejoras_completas():
    """Verifica que todas las mejoras est√©n implementadas en el c√≥digo."""
    print("\nüîç Verificando mejoras completas en el c√≥digo...")
    
    try:
        with open('frames/frame_empleado.py', 'r', encoding='utf-8') as f:
            contenido = f.read()
        
        mejoras = [
            ('self.geometry("650x600")', 'Tama√±o de ventana aumentado'),
            ('ttk.Separator(options_frame, orient=\'horizontal\')', 'Separador visual agregado'),
            ('ttk.LabelFrame(options_frame, text="Eliminaci√≥n Forzada"', 'Frame dedicado agregado'),
            ('text="‚òëÔ∏è Confirmo que entiendo las consecuencias"', 'Checkbox mejorado'),
            ('text="üí• ELIMINAR EMPLEADO Y TODAS SUS TARJETAS"', 'Bot√≥n redise√±ado'),
            ('bg=\'red\', fg=\'white\'', 'Colores del bot√≥n'),
            ('font=(\'Arial\', 12, \'bold\')', 'Fuente del bot√≥n'),
            ('text="‚ö†Ô∏è Esta acci√≥n NO se puede deshacer"', 'Mensaje adicional'),
            ('def cargar_empleados_disponibles(self):', 'Funci√≥n de carga de empleados'),
            ('self.combo_empleado_destino[\'values\'] = nombres', 'Actualizaci√≥n del combobox'),
            ('def transferir_tarjetas(self):', 'Funci√≥n de transferencia'),
            ('def eliminar_forzado(self):', 'Funci√≥n de eliminaci√≥n forzada')
        ]
        
        resultados = []
        for codigo, descripcion in mejoras:
            if codigo in contenido:
                print(f"‚úÖ {descripcion}")
                resultados.append(True)
            else:
                print(f"‚ùå {descripcion}")
                resultados.append(False)
        
        print(f"\nüìä Resumen: {sum(resultados)}/{len(resultados)} mejoras implementadas")
        
        if all(resultados):
            print("üéâ ¬°Todas las mejoras est√°n implementadas correctamente!")
        else:
            print("‚ö†Ô∏è Algunas mejoras no se encontraron en el c√≥digo")
            
    except FileNotFoundError:
        print("‚ùå No se pudo encontrar el archivo frame_empleado.py")
    except Exception as e:
        print(f"‚ùå Error al verificar el c√≥digo: {e}")

def main():
    """Funci√≥n principal de prueba."""
    print("üöÄ Iniciando pruebas completas de mejoras en ventana de eliminaci√≥n")
    print("=" * 70)
    
    # Verificar mejoras en el c√≥digo
    verificar_mejoras_completas()
    
    # Preguntar si ejecutar la prueba visual
    print("\n" + "=" * 70)
    respuesta = input("¬øDeseas ejecutar la prueba visual completa? (s/n): ").lower()
    
    if respuesta in ['s', 'si', 's√≠', 'y', 'yes']:
        test_ventana_eliminacion_completa()
    else:
        print("‚úÖ Pruebas completadas. Las mejoras est√°n implementadas en el c√≥digo.")

if __name__ == "__main__":
    main()
